package {{package}};

import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

public class {{className}} implements Parcelable {

    private static final String KEY_BUNDLE_ID = "{{name}}";
    private static final String VALUE_BUNDLE_ID = {{className}}.class.getCanonicalName();

    @Nullable
    public static {{className}} fromBundle(@Nullable Bundle bundle) {
        if (bundle == null) {
            return null;
        }

        if (!bundle.containsKey(KEY_BUNDLE_ID)
                || !(VALUE_BUNDLE_ID).equals(bundle.getString(KEY_BUNDLE_ID))) {
            return null;
        }

        {{#properties}}
        {{#isRequired}}
        if (!bundle.containsKey("{{name}}")) {
            return null;
        }

        {{/isRequired}}
        {{/properties}}

        Builder builder = new Builder({{#properties}}{{#isRequired}}{{{getRequiredPropertyBuilder}}}{{^isLastRequiredItem}}, {{/isLastRequiredItem}}{{/isRequired}}{{/properties}});
        {{#properties}}
        {{^isRequired}}
        builder.{{name}}({{{getOptionalPropertyBuilder}}});
        {{/isRequired}}
        {{/properties}}
        return builder.build();
    }

    {{#properties}}
    private final {{javaType}} {{name}};
    {{/properties}}

    private {{className}}(Builder builder) {
        {{#properties}}
        this.{{name}} = builder.{{name}};
        {{/properties}}
    }

    private {{className}}(Parcel in) {
        Bundle bundle = in.readBundle();
        {{#properties}}
        {{#isRequired}}
        this.{{name}} = {{{getRequiredPropertyBuilder}}};
        {{/isRequired}}
        {{^isRequired}}
        this.{{name}} = {{{getOptionalPropertyBuilder}}};
        {{/isRequired}}
        {{/properties}}
    }

    {{#className}}
    {{#customObject}}
    public static final Creator<{{className}}> CREATOR = new Creator<{{className}}>() {
        @Override
        public {{className}} createFromParcel(Parcel in) {
            return new {{className}}(in);
        }

        @Override
        public {{className}}[] newArray(int size) {
            return new {{className}}[size];
        }
    };
    {{/customObject}}
    {{/className}}

    {{#properties}}
    {{#description}}
    /**
    * {{description}}
    *
    * @return {{javaType}}
    */
    {{/description}}
    {{#isRequired}}
    @NonNull
    {{/isRequired}}
    {{^isRequired}}
    @Nullable
    {{/isRequired}}
    public {{javaType}} get{{className}}() {
        return {{name}};
    }

    {{/properties}}

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeBundle(toBundle());
    }

    @NonNull
    public Bundle toBundle() {
        Bundle bundle = new Bundle();
        {{#properties}}
        {{#isRequired}}
        {{{setPropertyBuilder}}};
        {{/isRequired}}
        {{^isRequired}}
        if({{name}} != null) {
            {{{setPropertyBuilder}}};
        }
        {{/isRequired}}
        {{/properties}}
        bundle.putString(KEY_BUNDLE_ID, VALUE_BUNDLE_ID);
        return bundle;
    }

    public static class Builder {
        {{#properties}}
        {{#isRequired}}
        private final {{javaType}} {{name}};
        {{/isRequired}}
        {{^isRequired}}
        private {{javaType}} {{name}};
        {{/isRequired}}
        {{/properties}}

        public Builder({{#properties}}{{#isRequired}}@NonNull {{javaType}} {{name}}{{^isLastRequiredItem}}, {{/isLastRequiredItem}}{{/isRequired}}{{/properties}}) {
            {{#properties}}
            {{#isRequired}}
            this.{{name}} = {{name}};
            {{/isRequired}}
            {{/properties}}
        }
        {{#properties}}
        {{^isRequired}}

        @NonNull
        public Builder {{name}}(@Nullable {{javaType}} {{name}}) {
            this.{{name}} = {{name}};
            return this;
        }
        {{/isRequired}}
        {{/properties}}

        @NonNull
        public {{className}} build() {
            return new {{className}}(this);
        }
    }
}
