package {{{package}}}.api;

import android.os.Bundle;

import com.walmartlabs.electrode.reactnative.bridge.ElectrodeBridge;
import com.walmartlabs.electrode.reactnative.bridge.ElectrodeBridgeEvent;
import com.walmartlabs.electrode.reactnative.bridge.ElectrodeBridgeHolder;
import com.walmartlabs.electrode.reactnative.bridge.RequestDispatcherImpl;
import com.walmartlabs.electrode.reactnative.bridge.ExistingHandlerException;
import com.walmartlabs.electrode.reactnative.bridge.helpers.RequestHandler;
import com.walmartlabs.electrode.reactnative.bridge.helpers.RequestHandlerEx;
import com.walmartlabs.electrode.reactnative.bridge.helpers.Response;
{{#models}}
import {{{package}}}.model.{{{.}}};
{{/models}}

public final class {{{pascalCaseApiName}}}Api {

  private static ElectrodeBridge sElectrodeBridge;

  //====================================================================
  // Request Handlers declaration (Private)
  //====================================================================

  {{#requests}}
  {{#hasPayload}}
  private static RequestHandlerEx<{{{payload.type}}},{{#respPayloadType}}{{{respPayloadType}}}{{/respPayloadType}}{{^respPayloadType}}Void{{/respPayloadType}}> s{{{pascalCaseName}}}RequestHandler;
  {{/hasPayload}}
  {{^hasPayload}}
  private static RequestHandler{{#respPayloadType}}<{{{respPayloadType}}}>{{/respPayloadType}} s{{{pascalCaseName}}}RequestHandler;
  {{/hasPayload}}
  {{/requests}}

  //====================================================================
  // Request Handlers affectation (Public client surface)
  //====================================================================

  {{#requests}}
  {{#hasPayload}}
  public static void handle{{{pascalCaseName}}}Request(RequestHandlerEx<{{{payload.type}}},{{#respPayloadType}}{{{respPayloadType}}}{{/respPayloadType}}{{^respPayloadType}}Void{{/respPayloadType}}> handler) {
      s{{{pascalCaseName}}}RequestHandler = handler;
  }
  {{/hasPayload}}
  {{^hasPayload}}
  public static void handle{{{pascalCaseName}}}Request(RequestHandler{{#respPayloadType}}<{{{respPayloadType}}}>{{/respPayloadType}} handler) {
      s{{{pascalCaseName}}}RequestHandler = handler;
  }
  {{/hasPayload}}
  {{/requests}}

  //====================================================================
  // Events emition (Public client surface)
  //====================================================================

  {{#events}}
  {{#hasPayload}}
  public static void {{{name}}}({{{payload.type}}} {{{payload.name}}}) {
      {{{name}}}({{{payload.name}}}, ElectrodeBridgeEvent.DispatchMode.JS);
  }

  public static void {{{name}}}({{{payload.type}}} {{{payload.name}}}, final ElectrodeBridgeEvent.DispatchMode dispatchMode) {
      Bundle bundle = {{{payloadSerizalization}}}
      sElectrodeBridge.emitEvent(new ElectrodeBridgeEvent.Builder(Names.{{{constantName}}})
                                     .withDispatchMode(dispatchMode)
                                     .withData(bundle)
                                     .build());
  }
  {{/hasPayload}}
  {{^hasPayload}}
  public static void {{{name}}}() {
      {{{name}}}(ElectrodeBridgeEvent.DispatchMode.JS);
  }

  public static void {{{name}}}(final ElectrodeBridgeEvent.DispatchMode dispatchMode) {
      sElectrodeBridge.emitEvent(new ElectrodeBridgeEvent.Builder(Names.{{{constantName}}})
                                     .withDispatchMode(dispatchMode)
                                     .build());
  }
  {{/hasPayload}}
  {{/events}}

  //====================================================================
  // Bridge initialization
  //====================================================================

  static {
    ElectrodeBridgeHolder.setOnBridgeReadyListener(
      new ElectrodeBridgeHolder.OnBridgeReadyListener() {
        @Override
        public void onBridgeReady(ElectrodeBridge electrodeBridge) {
          {{{pascalCaseApiName}}}Api.sElectrodeBridge = electrodeBridge;

          //====================================================================
          // Registration of request handlers with bridge
          //====================================================================

          try {
            {{#requests}}
            electrodeBridge.requestRegistrar().registerRequestHandler(Names.{{{constantName}}}, new RequestDispatcherImpl.RequestHandler() {
                @Override
                public void onRequest(Bundle bundle, final RequestDispatcherImpl.RequestCompletioner requestCompletioner) {
                  {{{pascalCaseApiName}}}Api.s{{{pascalCaseName}}}RequestHandler.handleRequest({{#hasPayload}}{{{payloadDeserialization}}},{{/hasPayload}}new Response{{#respPayloadType}}<{{{respPayloadType}}}>{{/respPayloadType}}{{^respPayloadType}}<Void>{{/respPayloadType}}() {
                      @Override
                      {{#respPayloadType}}
                      public void onSuccess({{{respPayloadType}}} obj) {
                        Bundle bundle = {{{responsePayloadSerialization}}}
                        requestCompletioner.success(bundle);
                      }
                      {{/respPayloadType}}
                      {{^respPayloadType}}
                      public void onSuccess(Void obj) {
                        requestCompletioner.success(null);
                      }
                      {{/respPayloadType}}

                      @Override
                      public void onError(String code, String message) {
                        requestCompletioner.error(code, message);
                      }
                  });
                }
              });
            {{/requests}}
          } catch(ExistingHandlerException ex) {
          }
        }
     });
  }
}
