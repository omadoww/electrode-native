package {{{package}}}.api;

import android.support.annotation.NonNull;

import com.walmartlabs.electrode.reactnative.bridge.ElectrodeBridgeEventListener;
import com.walmartlabs.electrode.reactnative.bridge.ElectrodeBridgeRequestHandler;
import com.walmartlabs.electrode.reactnative.bridge.ElectrodeBridgeResponseListener;
import com.walmartlabs.electrode.reactnative.bridge.FailureMessage;
import com.walmartlabs.electrode.reactnative.bridge.None;
{{#models}}
import {{{package}}}.model.{{{.}}};
{{/models}}

public final class {{{pascalCaseApiName}}}Api {
  private static final Requests REQUESTS;
  private static final Events EVENTS;

  static {
    REQUESTS = new {{{pascalCaseApiName}}}Requests();
    EVENTS = new {{{pascalCaseApiName}}}Events();
  }

  private {{{pascalCaseApiName}}}Api() {}

  @NonNull
  public static Requests requests() {
    return REQUESTS;
  }

  @NonNull
  public static Events events() {
    return EVENTS;
  }

  public interface Events {
  {{#events}}
    String {{{constantName}}} = "{{{bridgeMessageName}}}";
  {{/events}}

  {{#events}}
    {{#hasPayload}}
    void add{{{pascalCaseName}}}EventListener(@NonNull final ElectrodeBridgeEventListener<{{{payload.type}}}> eventListener);
    void emit{{{pascalCaseName}}}Event(@NonNull {{{payload.type}}} {{{payload.name}}});
    {{/hasPayload}} 
    {{^hasPayload}}
    void add{{{pascalCaseName}}}EventListener(@NonNull final ElectrodeBridgeEventListener<None> eventListener);
    void emit{{{pascalCaseName}}}Event();
    {{/hasPayload}}
  {{/events}}
  }

  public interface Requests {
  {{#requests}}
    String {{{constantName}}} = "{{{bridgeMessageName}}}";
  {{/requests}}

  {{#requests}}
   void register{{{pascalCaseName}}}RequestHandler(@NonNull final ElectrodeBridgeRequestHandler<{{#hasPayload}}{{{payload.type}}}{{/hasPayload}}{{^hasPayload}}None{{/hasPayload}}, {{#respPayloadType}}{{{respPayloadType}}}{{/respPayloadType}}{{^respPayloadType}}None{{/respPayloadType}}> handler);
   void {{{name}}}({{#hasPayload}}@NonNull {{{payload.type}}} {{payload.name}}, {{/hasPayload}}@NonNull final ElectrodeBridgeResponseListener<{{#respPayloadType}}{{{respPayloadType}}}{{/respPayloadType}}{{^respPayloadType}}None{{/respPayloadType}}> responseListener);
  {{/requests}}
  }
}
