package {{{package}}}.api;

import android.os.Bundle;
import android.support.annotation.NonNull;

import com.walmartlabs.electrode.reactnative.bridge.ElectrodeBridge;
import com.walmartlabs.electrode.reactnative.bridge.ElectrodeBridgeHolder;
import com.walmartlabs.electrode.reactnative.bridge.ElectrodeBridgeRequest;
import com.walmartlabs.electrode.reactnative.bridge.ElectrodeBridgeRequest.DispatchMode;
import com.walmartlabs.electrode.reactnative.bridge.EventDispatcherImpl;
import com.walmartlabs.electrode.reactnative.bridge.RequestCompletionListener;
import com.walmartlabs.electrode.reactnative.bridge.helpers.EventListener;
import com.walmartlabs.electrode.reactnative.bridge.helpers.Response;
{{#models}}
import {{{package}}}.model.{{{.}}};
{{/models}}
import java.util.Collections;
import java.util.HashMap;
import java.util.Set;

public final class {{{pascalCaseApiName}}}ApiClient {

  private static ElectrodeBridge sElectrodeBridge;

  //====================================================================
  // Events listeners for each event name (Private)
  //====================================================================

  {{#events}}
  private static Set<EventListener{{#hasPayload}}<{{{payload.type}}}>{{/hasPayload}}> s{{{pascalCaseName}}}Listeners =
          Collections.newSetFromMap(new HashMap<EventListener{{#hasPayload}}<{{{payload.type}}}>{{/hasPayload}}, Boolean>());
  {{/events}}

  //====================================================================
  // Events listener registration (Public client surface)
  //====================================================================

  {{#events}}
  public static void on{{{pascalCaseName}}}(EventListener{{#hasPayload}}<{{{payload.type}}}>{{/hasPayload}} listener) {
      s{{{pascalCaseName}}}Listeners.add(listener);
    }
  {{/events}}

  //====================================================================
  // Requests sending (Public client surface)
  //====================================================================

  {{#requests}}
  public static void {{{name}}}({{#hasPayload}}final {{{payload.type}}} {{{payload.name}}},{{/hasPayload}}
                                final Response{{#respPayloadType}}<{{{respPayloadType}}}>{{/respPayloadType}} response) {
    {{{name}}}({{#hasPayload}}{{{payload.name}}},{{/hasPayload}} response, DispatchMode.JS);
  }

  public static void {{{name}}}({{#hasPayload}}final {{{payload.type}}} {{{payload.name}}},{{/hasPayload}}
                                final Response{{#respPayloadType}}<{{{respPayloadType}}}>{{/respPayloadType}} response,
                                final DispatchMode dispatchMode) {
    {{#hasPayload}}Bundle bundle = {{{payloadSerizalization}}}{{/hasPayload}}
     ElectrodeBridgeRequest req = new ElectrodeBridgeRequest.Builder(Names.{{{constantName}}})
                       {{#hasPayload}}.withData(bundle){{/hasPayload}}
                                      .withDispatchMode(dispatchMode)
                                      .build();

     sElectrodeBridge.sendRequest(req, new RequestCompletionListener() {
       @Override
       {{#respPayloadType}}
       public void onSuccess(Bundle bundle) {
           response.onSuccess({{{responsePayloadDeserialization}}});
       }
       {{/respPayloadType}}
       {{^respPayloadType}}
       public void onSuccess(Bundle bundle) {
           response.onSuccess(null);
       }
       {{/respPayloadType}}

       @Override
       public void onError(String code, String message) {
           response.onError(code, message);
       }
     });
  }
  {{/requests}}

  //====================================================================
  // Bridge initialization
  //====================================================================

  static {
    ElectrodeBridgeHolder.setOnBridgeReadyListener(
      new ElectrodeBridgeHolder.OnBridgeReadyListener() {
        @Override
        public void onBridgeReady(ElectrodeBridge electrodeBridge) {
          {{{pascalCaseApiName}}}ApiClient.sElectrodeBridge = electrodeBridge;

          //====================================================================
          // Registration of event handlers with bridge
          //====================================================================

          {{#events}}
          electrodeBridge.eventRegistrar().registerEventListener(Names.{{{constantName}}}, new EventDispatcherImpl.EventListener() {
                      @Override
                      public void onEvent(@NonNull Bundle bundle) {
                       for (EventListener{{#hasPayload}}<{{{payload.type}}}>{{/hasPayload}} listener : s{{{pascalCaseName}}}Listeners) {
                         listener.onEvent({{{payloadDeserialization}}});
                       }
                      }
                    });
          {{/events}}
        }
     });
  }
}
