{{>licenseInfo}}

{{#emitJSDoc}}  /**{{#projectDescription}}
   * {{projectDescription}}.<br>{{/projectDescription}}
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var {{moduleName}} = require('{{#invokerPackage}}{{invokerPackage}}/{{/invokerPackage}}index'); // See note below*.
   * var xxxSvc = new {{moduleName}}.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new {{moduleName}}.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['{{#invokerPackage}}{{invokerPackage}}/{{/invokerPackage}}index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new {{moduleName}}.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new {{moduleName}}.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module {{#invokerPackage}}{{invokerPackage}}/{{/invokerPackage}}index
   * @version {{projectVersion}}
   */{{/emitJSDoc}}
import _ApiClient from './ApiClient';
{{#models}}
import _{{importPath}} from './{{#modelPackage}}{{modelPackage}}/{{/modelPackage}}{{importPath}}';
{{/models}}
{{#apiInfo}}{{#apis}}
import _{{importPath}} from './{{#apiPackage}}{{apiPackage}}/{{/apiPackage}}{{importPath}}';
{{/apis}}{{/apiInfo}}


export const ApiClient = _ApiClient;
{{#models}}
export const {{importPath}} = _{{importPath}};
{{/models}}
{{#apiInfo}}{{#apis}}
export const {{importPath}} = _{{importPath}};
{{/apis}}{{/apiInfo}}

