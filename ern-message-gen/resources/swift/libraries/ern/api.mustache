public class {{classname}}: NSObject  {
    {{#operations}}
    {{#operation}}
    {{#isEvent}}
    static let kEvent{{{camelizedNickName}}} = "{{package}}.event.{{operationId}}";
    {{/isEvent}}

    {{^isEvent}}
    static let kRequest{{{camelizedNickName}}} = "{{package}}.request.{{operationId}}";
    {{/isEvent}}
    {{/operation}}
    {{/operations}}

    {{#hasEvent}}
    public lazy var events: Events = {
        return {{baseName}}Events()
    }()

    {{/hasEvent}}

    public lazy var requests: Requests = {
        return {{baseName}}Requests()
    }()
}

{{#hasEvent}}
public class {{classname}}Events: NSObject {
    {{#operations}}
    {{#operation}}
    {{#isEvent}}
    public func add{{camelizedNickName}}EventListener(eventListener: ElectrodeBridgeEventListener) {
        assertionFailure("should override")
    }
    {{/isEvent}}
    {{/operation}}

    {{#operation}}
    {{#isEvent}}
    public func emitEvent{{camelizedNickName}}({{#hasRequestParam}}{{#requestParam}}{{paramName}}: {{{dataType}}}{{/requestParam}}{{/hasRequestParam}}) {
        assertionFailure("should override")

    }
    {{/isEvent}}
    {{/operation}}
    {{/operations}}
}
{{/hasEvent}}

public class {{classname}}Requests: NSObject {
    {{#operations}}
    {{#operation}}
    {{^isEvent}}
    public func register{{camelizedNickName}}RequestHandler(handler: ElectrodeBridgeRequestHandler) {
        assertionFailure("should override")
    }

    {{/isEvent}}
    {{/operation}}
    {{#operation}}
    {{^isEvent}}
    public func {{nickname}}({{#hasRequestParam}}{{#requestParam}}{{{paramName}}}: {{dataType}}, {{/requestParam}}{{/hasRequestParam}}responseListener: ElectrodeBridgeResponseListener) {
        assertionFailure("should override")
    }

    {{/isEvent}}
    {{/operation}}
    {{/operations}}
}

