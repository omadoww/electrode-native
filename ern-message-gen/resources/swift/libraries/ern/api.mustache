public class {{classname}} {
    {{#operations}}
    {{#operation}}
    {{#isEvent}}
    static let kEvent{{{nickNameConstant}}} = "{{classname}}.event.{{operationId}}";
    {{/isEvent}}

    {{^isEvent}}
    static let kRequest{{{nickNameConstant}}} = "{{classname}}.request.{{operationId}}";
    {{/isEvent}}
    {{/operation}}
    {{/operations}}

    {{#hasEvent}}
    lazy var events: Events = {
        return {{baseName}}Events()
    }()

    {{/hasEvent}}

    lazy var requests: Requests = {
        return {{baseName}}Requests()
    }()

    {{#hasEvent}}
    public class Events {
        {{#operations}}
        {{#operation}}
        {{#isEvent}}
        func add{{camelizedNickName}}EventListener(eventListener: ElectrodeBridgeEventListener) {
            assertionFailure("should override")
        }
        {{/isEvent}}
        {{/operation}}

        {{#operation}}
        {{#isEvent}}
        func emitEvent{{camelizedNickName}}({{#hasRequestParam}}{{#requestParam}}{{paramName}}: {{{dataType}}}{{/requestParam}}{{/hasRequestParam}}) {
            assertionFailure("should override")

        }
        {{/isEvent}}
        {{/operation}}
        {{/operations}}
    }
    {{/hasEvent}}

    public class Requests {
        {{#operations}}
        {{#operation}}
        {{^isEvent}}
        func register{{camelizedNickName}}RequestHandler(handler: ElectrodeBridgeRequestHandler) {
            assertionFailure("should override")
        }

        {{/isEvent}}
        {{/operation}}
        {{#operation}}
        {{^isEvent}}
        func {{nickname}}({{#hasRequestParam}}{{#requestParam}}{{{paramName}}}: {{dataType}}, {{/requestParam}}{{/hasRequestParam}}responseListener: ElectrodeBridgeResponseListener) {
            assertionFailure("should override")
        }

        {{/isEvent}}
        {{/operation}}
        {{/operations}}
    }
}