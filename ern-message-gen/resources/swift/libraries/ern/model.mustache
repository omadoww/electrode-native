{{#description}}
/**
{{{description}}}
*/
{{/description}}
public class {{classname}}: NSObject, Bridgeable {

    private static let tag = String(describing: type(of: self))

    {{#models}}
    {{#model}}
    {{#vars}}
    {{^isEnum}}
    {{#description}}
    /**
     {{{description}}}
     */
    {{/description}}
    let {{name}}: {{{datatype}}}{{^required}}?{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
    {{/isEnum}}
    {{/vars}}

    public init({{#allVars}}{{^-first}}, {{/-first}}{{name}}: {{#isEnum}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{datatype}}{{/isEnum}}{{^required}}?{{/required}}{{/allVars}}) {
        {{#allVars}}
        self.{{name}} = {{name}}
        {{/allVars}}
    }

    convenience init?(dictionary:[String:Any]?) {
        guard let nonNullDictionary = dictionary else {
            return nil
        }

        {{#requiredVars}}
        {{^isPrimitiveType}}
        let {{name}}Obj: {{datatype}}
        {{/isPrimitiveType}}
        guard let {{name}}{{^isPrimitiveType}}Dict{{/isPrimitiveType}} = dictionary["{{name}}"] as? {{#isPrimitiveType}}{{datatype}}{{/isPrimitiveType}}{{^isPrimitiveType}}[String: Any]{{/isPrimitiveType}} else {
        {{#required}}
           assertionFailure("\({{classname}}.tag) need a '{{name}}' property")
        {{/required}}
           return nil
        }
        {{^isPrimitiveType}}
        {{name}}Obj = {{datatype}}(dictionary: {{name}}Dict)
        {{/isPrimitiveType}}

        {{/requiredVars}}

        {{#optionalVars}}
        {{#isPrimitiveType}}
        let {{name}} = nonNullDictionary["{{name}}"] as? {{datatype}}?

        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        let {{name}}Obj: {{datatype}}?
        guard let {{name}}Dict = nonNullDictionary["{{name}}"] as? [String: Any] else {
            {{name}}Obj = nil
            return
        }
        {{name}}Obj = {{datatype}}(dictionary: {{name}}Dict)

        {{/isPrimitiveType}}
        {{/optionalVars}}
        self.init({{#allVars}}{{name}}: {{name}}{{^-first}}, {{/-first}}{{/allVars}})
    }

    public func toDictionary() -> NSDictionary {
        var dict =  [
            {{#requiredVars}}
            "{{name}}": self.{{name}}{{^isPrimitiveType}}.toDictionary(){{/isPrimitiveType}}{{#hasMore}},{{/hasMore}}
            {{/requiredVars}}
        ] as [AnyHashable : Any]

        {{#optionalVars}}
        if let nonNull{{nameInCamelCase}} = self.{{name}} {
            dict["{{name}}"] = nonNull{{nameInCamelCase}}{{^isPrimitiveType}}.toDictionary(){{/isPrimitiveType}}
        }
        {{/optionalVars}}
        return dict as NSDictionary
    }

}{{/model}}
{{/models}}
