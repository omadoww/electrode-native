{{#description}}
/**
{{{description}}}
*/
{{/description}}
public class {{classname}}: ElectrodeObject, Bridgeable {

    private static let tag = String(describing: type(of: self))

    {{#models}}
    {{#model}}
    {{#vars}}
    {{^isEnum}}
    {{#description}}
    /**
     {{{description}}}
     */
    {{/description}}
    let {{name}}: {{{datatype}}}{{^required}}?{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
    {{/isEnum}}
    {{/vars}}

    public init({{#allVars}}{{^-first}}, {{/-first}}{{name}}: {{#isEnum}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{datatype}}{{/isEnum}}{{^required}}?{{/required}}{{/allVars}}) {
        {{#allVars}}
        self.{{name}} = {{name}}
        {{/allVars}}
        super.init()
    }

    required public init(dictionary:[AnyHashable:Any]) {
        if
            {{#requiredVars}}
            let {{name}}{{^isPrimitiveType}}Dict{{/isPrimitiveType}} = dictionary["{{name}}"] as? {{#isPrimitiveType}}{{datatype}}{{/isPrimitiveType}}{{^isPrimitiveType}}[AnyHashable: Any]{{/isPrimitiveType}}{{^last}},{{/last}}{{#last}} { {{/last}}
            {{/requiredVars}}
            {{#requiredVars}}
            {{#isPrimitiveType}}
            self.{{name}} = {{name}}
            {{/isPrimitiveType}}
            {{^isPrimitiveType}}
            self.{{name}} = {{datatype}}(dictionary: {{name}}Dict)
            {{/isPrimitiveType}}
            {{/requiredVars}}
        } else {
            assertionFailure("\({{classname}}.tag) missing one or more required properties[{{#requiredVars}}{{name}}{{^last}},{{/last}}{{/requiredVars}}]")
            {{#requiredVars}}
            self.{{name}} = dictionary["{{name}}"] as! {{datatype}}
            {{/requiredVars}}
        }

        {{#optionalVars}}
        {{#isPrimitiveType}}
        self.{{name}} = dictionary["{{name}}"] as? {{datatype}}
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}

        if let {{name}}Dict = dictionary["{{name}}"] as? [AnyHashable: Any] {
            self.{{name}} = {{datatype}}(dictionary: {{name}}Dict)
        } else {
            self.{{name}} = nil
        }
        {{/isPrimitiveType}}
        {{/optionalVars}}

        super.init(dictionary: dictionary)
    }

    public func toDictionary() -> NSDictionary {
        var dict =  [
            {{#requiredVars}}
            "{{name}}": self.{{name}}{{^isPrimitiveType}}.toDictionary(){{/isPrimitiveType}}{{^last}},{{/last}}
            {{/requiredVars}}
        ] as [AnyHashable : Any]

        {{#optionalVars}}
        if let nonNull{{nameInCamelCase}} = self.{{name}} {
            dict["{{name}}"] = nonNull{{nameInCamelCase}}{{^isPrimitiveType}}.toDictionary(){{/isPrimitiveType}}
        }
        {{/optionalVars}}
        return dict as NSDictionary
    }

}{{/model}}
{{/models}}
